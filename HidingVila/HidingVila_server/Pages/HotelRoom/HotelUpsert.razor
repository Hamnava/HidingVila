@page "/hotel-room/create"
@page "/hotel-room/edit/{Id:int}"
@using HidingVila_server.Service.IService
@using Models
@inject IHotelRoom _room
@inject NavigationManager nav
@inject IJSRuntime JsRuntime
@inject IUploadFile uploadFile

<div class="row mt-2 mb-5">
    <div class="col-12">
        <div class="card p-5">
        <div class="card-title text-info">
            <h2>@Title Hotel's Room</h2>
        </div>
        <div class="card-body">
            <EditForm Model="HotelRoomModel" OnValidSubmit="OnUpsert">
                <DataAnnotationsValidator />
                <div class="form-group">
                    <label>Name</label>
                    <InputText @bind-Value="@HotelRoomModel.Name" class="form-control"></InputText>
                    <ValidationMessage For="()=> HotelRoomModel.Name"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Ocupancy</label>
                    <InputNumber @bind-Value="@HotelRoomModel.Ocupancy" class="form-control"></InputNumber>
                    <ValidationMessage For="()=> HotelRoomModel.Ocupancy"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>RegularRate</label>
                    <InputNumber @bind-Value="@HotelRoomModel.RegularRate" class="form-control"></InputNumber>
                    <ValidationMessage For="()=> HotelRoomModel.RegularRate"></ValidationMessage>
                </div>
                 <div class="form-group">
                    <label>SqFt</label>
                    <InputText @bind-Value="@HotelRoomModel.SqFt" class="form-control"></InputText>
                    <ValidationMessage For="()=> HotelRoomModel.SqFt"></ValidationMessage>
                </div>
                <div class="form-group">
                    <label>Details</label>
                    <InputTextArea @bind-Value="@HotelRoomModel.Details" class="form-control"></InputTextArea>
                </div>
                <div class="form-group">                   
                    <InputFile OnChange="HandleFileUpload" class="form-control"></InputFile>
                </div>
                <button class="btn btn-primary">@Title Room</button>
                <NavLink class="btn btn-secondary" href="hotel-room">Back to list</NavLink>
            </EditForm>
        </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? Id { get; set; }

    private HotelRoomDTO HotelRoomModel {get;set;} = new HotelRoomDTO();
    private string Title {get;set;} = "Create";

    protected override async Task OnInitializedAsync()
    {
        if (Id != null)
        {
            // Update
            Title = "Update";
            HotelRoomModel = await _room.GetHotelRoom(Id.Value);
        }
        else
        {
            // create
            HotelRoomModel = new HotelRoomDTO();
        }
    }

    private async Task OnUpsert()
    {
        var roomName = await _room.ExistRoomName(HotelRoomModel.Name, HotelRoomModel.Id);
        if(roomName != null)
        {
            await JsRuntime.InvokeVoidAsync("showMessage","error", "This room is already existed");
            return;
        }
        if (HotelRoomModel.Id != 0 && Title == "Update")
        {
            // update
            var update = await _room.UpdateHotelRoom(HotelRoomModel.Id, HotelRoomModel);
            await JsRuntime.InvokeVoidAsync("showMessage","success", "The operation Succeeed");
        }
        else
        {
            // create
            await _room.CreateHotelRoom(HotelRoomModel);
            await JsRuntime.InvokeVoidAsync("showMessage","success", "The operation Succeeed");
        }
        nav.NavigateTo("hotel-room");
    }

    private async Task HandleFileUpload(InputFileChangeEventArgs e)
    {
        try
        {
            var images = new List<string>();
            if (e.GetMultipleFiles().Count > 0)
            {
                foreach(var file in e.GetMultipleFiles())
                {
                    System.IO.FileInfo fileinfo = new System.IO.FileInfo(file.Name);
                    if(fileinfo.Extension.ToLower()== ".jpg" || 
                      fileinfo.Extension.ToLower()== ".png" ||
                       fileinfo.Extension.ToLower()== ".jpeg")
                    {
                        var uploadedFilePath = await uploadFile.UploadFile(file);
                        images.Add(uploadedFilePath);
                    }
                    else
                    {
                        await JsRuntime.InvokeVoidAsync("showMessage","error", "The image extention should be .jpg, .png , .jpeg");
                        return;
                    }
                }

                if (images.Any())
                {
                    if (HotelRoomModel.ImagesUrl != null && HotelRoomModel.ImagesUrl.Any())
                    {
                        HotelRoomModel.ImagesUrl.AddRange(images);
                    }
                    else
                    {
                        HotelRoomModel.ImagesUrl = new List<string>();
                        HotelRoomModel.ImagesUrl.AddRange(images);
                    }
                }
                else
                {
                    await JsRuntime.InvokeVoidAsync("showMessage","error", "Upload images Faild");
                    return;
                }
            }
        }
        catch (Exception)
        {
             await JsRuntime.InvokeVoidAsync("showMessage","error", "An Excepiton occured");
        }
    }
}
