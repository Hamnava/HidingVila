@page "/hotel-room"
@using HidingVila_server.Service.IService
@using Models
@inject IHotelRoom _room
@inject NavigationManager nav
@inject IJSRuntime jsRuntime
@inject IUploadFile _fileupload


<div class="row mt-4">
    <div class="col-8">
        <h4 class="card-title text-info">Hotel Room's List</h4>
    </div>
    <div class="col-3 offset-1">
        <NavLink href="hotel-room/create" class="btn btn-info">Add New Room</NavLink>
    </div>
</div>
<div class="row mt-4">
    <div class="col-12">
        <table class="table table-bordered table-hover">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Occupancy</th>
                    <th>Rate</th>
                    <th>SqFt</th>
                    <th>Operation</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in rooms)
               {
                   <tr>
                       <td>@item.Name</td>
                       <td>@item.Ocupancy</td>
                       <td>@item.RegularRate</td>
                       <td>@item.SqFt</td>
                       <td>
                           <NavLink href=@($"hotel-room/edit/{item.Id}") class="btn btn-info">Edit</NavLink>
                           <button @onclick="()=> HandlDelete(item.Id)"  class="btn btn-danger">Delete</button>
                       </td>
                   </tr>
               }
            </tbody>
        </table>
    </div>
</div>

<DeleteConfirmationComponent IsParentProcessing="IsProcessing" ConfimationChanged="ConfirmDelete_Click"></DeleteConfirmationComponent>
@code {
    private IEnumerable<HotelRoomDTO> rooms = new List<HotelRoomDTO>();
    private int? DeleteRoomId { get; set; } = null;
    private bool IsProcessing { get; set; } = false;

    protected override async void OnInitialized()
    {
        rooms = await _room.GetRooms();
    }

    private async Task HandlDelete(int roomId)
    {
        DeleteRoomId = roomId;
        await jsRuntime.InvokeVoidAsync("ShowDeleteConfirmationModal");
    }

    public async Task ConfirmDelete_Click(bool IsConfirmed)
    {
        IsProcessing = true;
        if (IsConfirmed && DeleteRoomId !=null)
        {
            HotelRoomDTO hotelRoom = await _room.GetHotelRoom(DeleteRoomId.Value);
            foreach(var image in hotelRoom.HotelImages)
            {
                var imageName = image.ImageUrl.Replace($"{nav.BaseUri}RoomImages/", "");
                _fileupload.DeleteFile(imageName);
            }

            await _room.RemoveHotelRoom(DeleteRoomId.Value);
            await jsRuntime.InvokeVoidAsync("showMessage", "success", "Hotel room deleted successfuly");
            rooms = await _room.GetRooms();
        }
        IsProcessing = false;
        await jsRuntime.InvokeVoidAsync("HideDeleteConfirmationModal");
    }
}
